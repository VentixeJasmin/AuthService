using AuthService.Models;
using AuthService.Services;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;


namespace AuthService.Controllers;

[Route("api/[controller]")]
[ApiController]
public class AuthController(UserManager<UserEntity> userManager, UserService userService, IConfiguration configuration) : ControllerBase
{
    private readonly UserManager<UserEntity> _userManager = userManager;
    private readonly UserService _userService = userService;
    private readonly IConfiguration _configuration = configuration;


    [HttpPost("signup")]
    public async Task<IActionResult> RegisterUser([FromBody] UserDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        if (dto.AcceptTerms == false)
        {
            return BadRequest(ModelState);
        }

        var user = new UserEntity
        {
            FirstName = dto.FirstName,
            LastName = dto.LastName,
            UserName = dto.Email,
            Email = dto.Email,
            EmailConfirmed = false
        };

        var result = await _userService.CreateUserAsync(user, dto.Password);
        if (result.Succeeded)
        {
            var httpClient = new HttpClient();

            var verificationRequest = new VerificationRequestModel { Email = dto.Email, FirstName = dto.FirstName, LastName = dto.LastName };

            var apiResult = await httpClient.PostAsJsonAsync("https://verificationservice-jdf-e5d8azctc7fnapca.swedencentral-01.azurewebsites.net/api/verification/sendverification", verificationRequest);
            if (!apiResult.IsSuccessStatusCode)
                return BadRequest("Something went wrong, please try again");

            return Ok(new { message = "Registration successful. Please check your email and verify your account.", userId = user.Id });
        }
        else
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError(string.Empty, error.Description);
            }
            return BadRequest(ModelState);
        }
    }

    [HttpPost("signin")]
    public async Task<IActionResult> SignIn([FromBody] SignInDto dto)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        var user = await _userManager.FindByEmailAsync(dto.Email);
        if (user == null || !await _userManager.CheckPasswordAsync(user, dto.Password))
            return Unauthorized();

        if (!user.EmailConfirmed)
        {
            ModelState.AddModelError(string.Empty, "Email address not confirmed.");
            return BadRequest(dto);
        }

        var token = GenerateJwtToken(user, dto.RememberMe);

        return Ok(new
        {
            message = "Signed in",
            token,
            user = new
            {
                email = user.Email,
                firstName = user.FirstName,
                lastName = user.LastName
            }
        });
    }


    [HttpPost("confirm-email")]
    public async Task<IActionResult> ConfirmEmail([FromBody] ConfirmEmailRequest request)
    {
        var user = await _userManager.FindByEmailAsync(request.Email);
        if (user == null)
            return BadRequest("User not found.");

        user.EmailConfirmed = true;
        await _userManager.UpdateAsync(user);

        var token = GenerateJwtToken(user, false);

        return Ok(new
        {
            message = "Email confirmed successfully",
            token,
            user = new
            {
                email = user.Email,
                firstName = user.FirstName,
                lastName = user.LastName
            }
        });
    }

    [HttpPost("signout")]
    public new IActionResult SignOut()
    {
        // With JWT, logout is handled client-side by removing the token
        return Ok(new { message = "Signed out successfully" });
    }


    [HttpGet("me")] //This endpoint is generated by ChatGPT 4o to help keep track of the current user
    public async Task<IActionResult> GetCurrentUser()
    {
        if (User?.Identity == null || !User.Identity.IsAuthenticated)
            return Unauthorized();

        var user = await _userManager.GetUserAsync(User);
        if (user == null)
            return Unauthorized();

        return Ok(new
        {
            user.Email,
            user.FirstName,
            user.LastName
        });
    }

    //method generated by Claude AI
    private string GenerateJwtToken(UserEntity user, bool rememberMe)
    {
        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
        var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

        var claims = new[]
        {
        new Claim(ClaimTypes.NameIdentifier, user.Id),
        new Claim(ClaimTypes.Email, user.Email!),
        new Claim(ClaimTypes.Name, user.Email!),
        new Claim("FirstName", user.FirstName ?? ""),
        new Claim("LastName", user.LastName ?? "")
    };
        var audiences = _configuration.GetSection("Jwt:Audiences").Get<string[]>();
        var audience = audiences?.FirstOrDefault() ?? _configuration["Jwt:Audience"];

        var token = new JwtSecurityToken(
            issuer: _configuration["Jwt:Issuer"],
            audience: audience,
            claims: claims,
            expires: DateTime.Now.AddDays(rememberMe ? 30 : 1), // Respect RememberMe
            signingCredentials: creds);

        return new JwtSecurityTokenHandler().WriteToken(token);
    }
}
